{"version":3,"sources":["webpack:///./app/context/store.ts","webpack:///./app/stores/ScreenStore.ts","webpack:///./app/stores/UserStore.ts","webpack:///./app/containers/MainPage/index.tsx","webpack:///./app/containers/Score/index.tsx","webpack:///./app/components/TodoExample.tsx","webpack:///./app/index.tsx","webpack:///./app/stores/TodoStore.ts","webpack:///./app/stores/index.ts","webpack:///./main.tsx"],"names":["StoreContext","createContext","useStore","_store","Error","ScreenEnum","UserEnum","model","currentScreen","number","test","actions","self","setScreen","screen","setTest","props","store","screenStore","MainPage","className","type","onClick","Score","text","setText","onChange","e","target","value","placeholder","todoStore","addTodo","todos","map","todo","idx","key","title","App","console","log","subscribe","detail","data","schemeAttribute","document","createAttribute","sendPromise","user","setTimeout","userStore","setUser","fetchUser","Fragment","Todo","string","array","push","CityModel","id","UserModel","first_name","last_name","sex","city","optional","photo_100","photo_max_orig","bdate","photo_200","timezone","rootStore","create","patch","render","Provider","getElementById"],"mappings":"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","file":"app.d21d896da244d4b130b1.js","sourcesContent":["import React, { useContext } from 'react'\n\nexport const StoreContext = React.createContext(null)\n\nexport function useStore() {\n\n    const _store = useContext(StoreContext);\n\n    if (!_store) {\n        throw new Error('You have forgotten to use StoreProvider, go fish');\n    }\n    return _store;\n}\n","import {types} from 'mobx-state-tree';\n\nexport enum ScreenEnum {\n    'MainPage',\n    'Profile',\n    'Score',\n    'Status',\n    'ListGift',\n}\n\nconst ScreenStore = types\n    .model('TodoStore', {\n        currentScreen: types.number,\n        test:types.number,\n    })\n    .actions(self => ({\n        setScreen(screen: ScreenEnum) {\n            self.currentScreen = screen;\n        },\n        setTest() {\n            self.test += 1;\n        }\n    }));\n\nexport default ScreenStore;\n","import {Instance, types} from \"mobx-state-tree\";\n\nexport enum UserEnum {\n    'MainPage',\n    'Profile',\n    'Score',\n    'Status',\n    'ListGift',\n}\n\nexport const CityModel = types\n    .model('CityModel', {\n        id: 0,\n        title: '',\n    });\n\nexport const UserModel = types\n    .model('UserModel', {\n        id: 0,\n        first_name: '',\n        last_name: '',\n        sex: 0,\n        city: types.optional(CityModel, {}),\n        photo_100: '',\n        photo_max_orig: '',\n        bdate: '',\n        photo_200: '',\n        timezone: 0,\n    });\n\n// interface IUserModel extends Instance<typeof UserModel> { };\n\nconst UserStore = types\n    .model('TodoStore', {\n        user: types.optional(UserModel, {}),\n    })\n    .actions(self => ({\n        setUser(user: Instance<typeof UserModel>) {\n            self.user = user;\n        },\n    }));\n\nexport default UserStore;\n","import React from 'react';\nimport {useStore} from '../../context/store';\nimport {observer} from 'mobx-react-lite';\nimport {ScreenEnum} from \"app/stores/ScreenStore\";\n\nconst MainPage = observer(function (props) {\n    const store = useStore();\n\n    function handleSubmit() {\n        store.screenStore.setScreen(ScreenEnum.Score);\n    }\n\n    if (store.screenStore.currentScreen !== ScreenEnum.MainPage) return null;\n    return (\n        <div className=\"example\">\n            <h1>MainPage</h1>\n            <div>\n                <button type=\"submit\" onClick={handleSubmit}>\n                    add\n                </button>\n            </div>\n            <div>\n                {store.screenStore.test}\n            </div>\n            <h1>---------</h1>\n        </div>\n    );\n});\n\nexport default MainPage;\n","import * as React from \"react\";\nimport {ScreenEnum} from \"app/stores/ScreenStore\";\nimport {useStore} from \"app/context/store\";\nimport {observer} from \"mobx-react-lite\";\n\n\nconst Score = observer(function () {\n\n    const store = useStore();\n    if (store.screenStore.currentScreen !== ScreenEnum.Score) return null;\n    return <React.Fragment>\n        <div className=\"example\">\n            Score\n        </div>\n    </React.Fragment>;\n});\n\nexport default Score;","import React, {useState} from 'react';\nimport {useStore} from '../context/store';\nimport {observer} from 'mobx-react-lite';\n\nconst TodoExample = observer((props) => {\n    const store = useStore();\n    const [text, setText] = useState('');\n\n    function handleInputChange(e) {\n        setText(e.target.value);\n    }\n\n    function handleSubmit() {\n        if (text) {\n            setText('');\n            store.todoStore.addTodo(text);\n        }\n    }\n\n    function handle() {\n\n        store.todoStore.setTest();\n\n    }\n\n    return (\n        <div className=\"example\">\n            <h1>React Hooks Todo Example</h1>\n            <div>\n                <input\n                    type=\"text\"\n                    onChange={handleInputChange}\n                    value={text}\n                    placeholder=\"todo\"\n                />\n                <button type=\"submit\" onClick={handleSubmit}>\n                    add\n                </button>\n            </div>\n            <div>\n                {store.todoStore.todos.map((todo, idx) => (\n                    <li key={idx}>{todo.title}</li>\n                ))}\n            </div>\n            <h1>---------</h1>\n            <div>\n                <button type=\"submit\" onClick={handle}>\n                    add\n                </button>\n            </div>\n            <div>\n                {store.todoStore.test}\n            </div>\n            <h1>---------</h1>\n        </div>\n    );\n});\n\nexport default TodoExample;\n","import React, {useEffect} from 'react';\nimport MainPage from \"app/containers/MainPage\";\nimport Score from \"app/containers/Score\";\nimport {hot} from \"react-hot-loader/root\";\nimport TodoExample from \"app/components/TodoExample\";\nimport connect from '@vkontakte/vk-connect';\nimport {useStore} from \"app/context/store\";\n\nexport const App = hot(() => {\n    const store = useStore();\n    //get user info\n    useEffect(() => {\n        // dispatch({\n        //     type: 'setPopout',\n        //     payload: {\n        //         popout: true,\n        //     }\n        // })\n        console.log('useEffect-- ',);\n        connect.subscribe(({detail: {type, data}}) => {\n                if (type === 'VKWebAppUpdateConfig') {\n                    const schemeAttribute = document.createAttribute('scheme');\n                    console.log('schemeAttribute-- ', schemeAttribute);\n                }\n            }\n        );\n\n        async function fetchUser() {\n            console.log('fetchUser-- ',);\n            const user = await connect.sendPromise('VKWebAppGetUserInfo');\n            console.log('user-- ', user);\n            // const user = {\n            //     id: 151079225,\n            //     first_name: \"Евгений\",\n            //     last_name: \"Глечиков\",\n            //     sex: 2,\n            //     city: {id: 97, title: \"Новокузнецк\"},\n            //     country: {id: 1, title: \"Россия\"},\n            //     photo_100: \"https://sun9-46.userapi.com/c639127/v639127225/8ed0/IWvzk8fFTBI.jpg?ava=1\",\n            //     photo_max_orig: \"https://sun9-24.userapi.com/c639127/v639127225/8ecc/dFKoQdeRsWU.jpg?ava=1\",\n            //     bdate: \"17.12.1983\",\n            //     photo_200: \"https://sun9-70.userapi.com/c639127/v639127225/8ecf/ecFoax3YGYk.jpg?ava=1\",\n            //     timezone: 7\n            // };\n\n\n            setTimeout(() => store.userStore.setUser(user), 1000);\n\n            // dispatch({\n            //     type: 'setUser',\n            //     payload: {\n            //         fetchedUser: user,\n            //         popout: false,\n            //     }\n            // })\n        }\n\n        fetchUser();\n    }, []);\n\n\n    return (\n        <React.Fragment>\n            <MainPage/>\n            {/*/!**/}\n            {/*    //@ts-ignore*!/*/}\n            {/*<Profile/>*/}\n            <Score/>\n            {/*/!**/}\n            {/*    //@ts-ignore*!/*/}\n            {/*<Status/>*/}\n            {/*/!**/}\n            {/*    //@ts-ignore*!/*/}\n            {/*<ListGift/>*/}\n            <TodoExample/>\n        </React.Fragment>\n    );\n});","import {types} from 'mobx-state-tree';\n\nconst Todo = types.model({\n    title: types.string\n});\n\nconst TodoStore = types\n    .model('TodoStore', {\n        todos: types.array(Todo),\n        test: types.number,\n    })\n    .actions(self => ({\n        addTodo(title) {\n            self.todos.push({title});\n            self.test += 1;\n        },\n        setTest() {\n            self.test += 1;\n        }\n    }));\n\n\nexport default TodoStore;\n","import {onPatch, types} from 'mobx-state-tree';\nimport TodoStore from './TodoStore';\nimport ScreenStore, {ScreenEnum} from './ScreenStore';\nimport makeInspectable from \"mobx-devtools-mst\";\nimport UserStore from \"app/stores/UserStore\";\n\nconst RootStore = types\n    .model('RootStore', {\n        todoStore: types.optional(TodoStore, {\n            todos: [],\n            test: 0,\n        }),\n        screenStore: types.optional(ScreenStore, {\n            currentScreen: ScreenEnum.MainPage,\n            test: 0,\n        }),\n        userStore: types.optional(UserStore, {}),\n    });\nconst rootStore = RootStore.create();\n\nonPatch(rootStore, patch => {\n    console.log(patch); // writes in console.log every changes in the state\n});\nmakeInspectable(rootStore); // MST dev tools\n\nexport default rootStore;\n","import {App} from './app';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport {StoreContext} from 'app/context/store';\nimport store from 'app/stores/index';\n\n\nReactDOM.render(\n    <StoreContext.Provider value={store}>\n        <App/>\n    </StoreContext.Provider>,\n    document.getElementById('root')\n);\n\n"],"sourceRoot":""}